#include<stdio.h>
#include<stdlib.h>


struct fcfs
{
    int p;
    int ar,bt,tat,wt,ct;
    struct fcfs *next;
} *head=NULL;

void main()
{
    struct fcfs *new, *current;
    int n,i,arr_time,burst_time,id;
    printf("\nhow many process?: ");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        new=(struct fcfs*)malloc(sizeof(struct fcfs));
        printf("Enter process id,arrival time and burst time: ");
        scanf("%d %d %d",&id,&arr_time,&burst_time);
        new->p=id;
        new->ar=arr_time;
        new->bt=burst_time;
        new->next=NULL;
        
        if(head==NULL)
        {
            head=current=new;
        }
        
        else
        {
            current=head;
            while(current->next!=NULL)
            {
                current=current->next;
            }
            
            current->next=new;
            
        }
        
    }
    
    
    current=head;
    while(current)
    {
        printf("\n%d                    %d                    %d              ",current->p,current->ar,current->bt);
        
        current=current->next;
    }
    
    
    
    //sort(head);
    
    int swapped,tmp;
    struct fcfs *ptr1;
    struct fcfs *lptr=NULL;
    if(head==NULL)
        return;
    do
    {
        swapped=0;
        ptr1=head;
        while(ptr1->next!=NULL)
        {
            if(ptr1->ar>ptr1->next->ar)
            {
                 tmp=ptr1->ar;
                ptr1->ar=ptr1->next->ar;
                ptr1->next->ar=tmp;
                
                 tmp=ptr1->bt;
                ptr1->bt=ptr1->next->bt;
                ptr1->next->bt=tmp;
                
                 tmp=ptr1->p;
                ptr1->p=ptr1->next->p;
                ptr1->next->p=tmp;
                
                swapped=1;
            }
            
            ptr1=ptr1->next;
        }
    }while(swapped);
            
  printf("\nProcess id    |   Arrival time    |   burst time  |");
    current=head;

    while(current)
    {
        printf("\n%d                     %d                   %d              ",current->p,current->ar,current->bt);
        
        current=current->next;
    }
    
    
    int k=0;
    current=head;
    int idle[50];
    int gnt[50];
    tmp=0;
    for(i=0;i<n;i++)
    {
        
        if(current->ar>k)
        {
            idle[i]=current->ar-k;
            
        }
        else
            idle[i]=0;
        
        gnt[i]=current->bt;
        k=idle[i]+current->bt+k;
        current=current->next;
    }
    
    
    
    k=0;
    int set=0;
    printf("\n*************Gantt chart*****************\n|");
    for(i=0;i<n;i++)
    {
             if(idle[i]>0)
            {
                    printf("IDLE|");
            
            }
       
       
        printf(" p%d|",i);
    
    }
    printf("\n");
    current=head;
    set=0;
    for(i=0;i<n;i++)
    {
         if(i==0)
         {
            if(current->ar>k)  
              {
                  printf("%d    %d",k,k+idle[i]);
                  k=k+idle[i];
                  set=1;
             }
     
        }
    
         if(i!=0)
         {
            if(current->ar>k)  
              {
                   printf("    %d",k+idle[i]);
                    k=k+idle[i];
                   set=1;
               }
     
        }
 
 
     if(set==0)
    {
     printf("%d     %d",k,k+gnt[i]);
     k=k+gnt[i];
     current->ct=k;
     current->tat=current->ct-current->ar;
     current->wt=current->tat-current->bt;
    
     current=current->next;
     
     }
     if(set==1)
     {
     printf("   %d",k+gnt[i]);
     k=k+gnt[i];
     current->ct=k;
     current->tat=current->ct-current->ar;
     current->wt=current->tat-current->bt;
    
     current=current->next;
     }
     set=0;
 
 }
 
 
 printf("\n************Process details************\n");
 printf("\nprocess Id\tArrival time\tBurst time\tcompletion time\tTAT\twaiting time\t\n");
 current=head;
 float avg_wt=0,avg_tat=0;
 while(current)
 {
     printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t\n",current->p,current->ar,current->bt,current->ct,current->tat,current->wt);
    avg_wt=avg_wt+current->wt;
    avg_tat=avg_tat+current->tat;
    current=current->next;
 }
 printf("\nAverage waiting time:%f\nAverage turnaround time:%f\n",avg_wt/n,avg_tat/n);
 
 }